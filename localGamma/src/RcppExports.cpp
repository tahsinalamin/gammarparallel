// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// gamma_cpp_dense
NumericMatrix gamma_cpp_dense(NumericMatrix X);
RcppExport SEXP _gammaPartition_gamma_cpp_dense(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_cpp_dense(X));
    return rcpp_result_gen;
END_RCPP
}
// gamma_cpp_sparse
NumericMatrix gamma_cpp_sparse(NumericMatrix X);
RcppExport SEXP _gammaPartition_gamma_cpp_sparse(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_cpp_sparse(X));
    return rcpp_result_gen;
END_RCPP
}
// gamma_cpp_diagonal
NumericMatrix gamma_cpp_diagonal(NumericMatrix X);
RcppExport SEXP _gammaPartition_gamma_cpp_diagonal(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_cpp_diagonal(X));
    return rcpp_result_gen;
END_RCPP
}
// k_gamma_cpp
List k_gamma_cpp(NumericMatrix X, int k, int class_col);
RcppExport SEXP _gammaPartition_k_gamma_cpp(SEXP XSEXP, SEXP kSEXP, SEXP class_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type class_col(class_colSEXP);
    rcpp_result_gen = Rcpp::wrap(k_gamma_cpp(X, k, class_col));
    return rcpp_result_gen;
END_RCPP
}
// k_gamma_diagonal
NumericMatrix k_gamma_diagonal(NumericMatrix X, int k, int class_col);
RcppExport SEXP _gammaPartition_k_gamma_diagonal(SEXP XSEXP, SEXP kSEXP, SEXP class_colSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type class_col(class_colSEXP);
    rcpp_result_gen = Rcpp::wrap(k_gamma_diagonal(X, k, class_col));
    return rcpp_result_gen;
END_RCPP
}
// naiveBayesPrediction
NumericMatrix naiveBayesPrediction(NumericMatrix X_Test, List mu, List sigma, List prior, IntegerVector class_labels);
RcppExport SEXP _gammaPartition_naiveBayesPrediction(SEXP X_TestSEXP, SEXP muSEXP, SEXP sigmaSEXP, SEXP priorSEXP, SEXP class_labelsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X_Test(X_TestSEXP);
    Rcpp::traits::input_parameter< List >::type mu(muSEXP);
    Rcpp::traits::input_parameter< List >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< List >::type prior(priorSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type class_labels(class_labelsSEXP);
    rcpp_result_gen = Rcpp::wrap(naiveBayesPrediction(X_Test, mu, sigma, prior, class_labels));
    return rcpp_result_gen;
END_RCPP
}
// assignCluster
List assignCluster(NumericMatrix X, List cluster_centroids, int k);
RcppExport SEXP _gammaPartition_assignCluster(SEXP XSEXP, SEXP cluster_centroidsSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type cluster_centroids(cluster_centroidsSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(assignCluster(X, cluster_centroids, k));
    return rcpp_result_gen;
END_RCPP
}
// gamma_cpp
NumericMatrix gamma_cpp(NumericMatrix X, std::string Flag1);
RcppExport SEXP _gammaPartition_gamma_cpp(SEXP XSEXP, SEXP Flag1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< std::string >::type Flag1(Flag1SEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_cpp(X, Flag1));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gammaPartition_gamma_cpp_dense", (DL_FUNC) &_gammaPartition_gamma_cpp_dense, 1},
    {"_gammaPartition_gamma_cpp_sparse", (DL_FUNC) &_gammaPartition_gamma_cpp_sparse, 1},
    {"_gammaPartition_gamma_cpp_diagonal", (DL_FUNC) &_gammaPartition_gamma_cpp_diagonal, 1},
    {"_gammaPartition_k_gamma_cpp", (DL_FUNC) &_gammaPartition_k_gamma_cpp, 3},
    {"_gammaPartition_k_gamma_diagonal", (DL_FUNC) &_gammaPartition_k_gamma_diagonal, 3},
    {"_gammaPartition_naiveBayesPrediction", (DL_FUNC) &_gammaPartition_naiveBayesPrediction, 5},
    {"_gammaPartition_assignCluster", (DL_FUNC) &_gammaPartition_assignCluster, 3},
    {"_gammaPartition_gamma_cpp", (DL_FUNC) &_gammaPartition_gamma_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gammaPartition(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
